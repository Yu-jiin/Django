code .gitignore 하고 시작해라 ...


가상환경
    - Python 애플리케이션과 그에 따른 패키지들을 격리하여 관리할 수 있는 독립적인 실행 환경

    패키지 목록이 필요한 이유
        - 두 명의 개발자가 같은 패키지버전을 사용해야 함.

    의존성 패키지 
        - 서로 다른 패키지임에도 같이 존재해야 하는 패키지도 있고,
        - 그 패키지들이 호환되야하고... 아무튼 개락 복잡함 

    가상환경 만들기 git bash
    1. 아무 폴더 만들고
    2. python -m venv venv              (venv는 관례적으로 사용되는 가상환경 이름)
    3. source venv/Scripts/activate     (가상환경 on)
    (운영체제마다 조금씩 달라서 macOS = source venv/bin/activate)
    4. pip freeze > requirements.txt    (txt파일이 만들어짐)
        - txt파일에 각 패키지 버전 적어서 공유 !! 
    5. pip install -r requirements.txt  (txt파일의 패키지 버전 한방에 설치갈비)
    6. deactivate                       (가상환경 끄기 // 그냥 꺼도 되긴 함)

    가상환경 주의사항
    1. 파이썬을 on/off로 전환
    2. venv폴더는 gitignore에 작성되어 원격 저장소에 공유 X
    3. 프로젝트마다 별도의 가상환경 사용 
    4. 이름은 그냥 venv로.. 다른거 쓰지마 

    django-admin startproject firstpjt .    (프젝 만들고)
    python manage.py runserver              (서버 실행)
    ctrl + c = 서버 종료 !! 
    python manage.py startapp articles      (앱 실행, 이름은 복수형으로)
    앱 생성하고 등록해야함 .. !!!
    settings.py에 
        INSTALLED_APPS = [
        'articles',     // 이거 등록해줘야함
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

Django Design Pattern
디자인패턴
    - SW설계에서 발생하는 문제를 해결하기 위한 일반적인 해결책
        (애플리케이션 구조는 이렇게 구성하자 라는 관행)

MVC 디자인 패턴 (Model, View, Controller) - 대표적인 패턴    
MTV 디자인 패턴 (Model, Template, View) - Django 구조화하는 패턴
    - 기존 MVC와 동일하나 단순 명칭을 다르게 정의 

요청 -> urls.py -> views.py -> templates

articles/templates 폴더 꼬옥 만들기 ... !! 


최종 == 
가상환경 생성 루틴
python -m venv venv
source venv/Scripts/activate
pip install django
pip freeze > requirements.txt
(git add 전 gitignore 생성 -> git 생성)

urls.py에서 각 url 문자열 경로는 반드시 /로 끝
view함수는 첫번째 인자로 요청객체를 받고 반드시 request로
django는 특정경로의 templates 파일만 읽어옴 

---------------------------------------------------------------------------

Django Template System
  - 사용자의 표현을 담당

Django Template Language
  - 조건, 반복, 변수등의 프로그래밍적 기능 제공 

DTL Syntax
  - Variable
    = render 함수 세번째 인자로 딕셔너리 사용 
    = key에 해당하는 문자열이 사용가능한 변수명 
      ex) {{variable}}   {{variable.attribute}}
        . 도트로 변수 속성 접근가능 

  - Filters
    = 변수뒤에 | 
    = 60 개의 built-in templates filters를 제공 장고 DTL 검색해서 봐
    = 연결이 가능함 
      ex) {{name|truncatewords:30}} = 이름을 30자로 잘라서 출력

  - Tags
    = 반복 논리 수행.. 일부는 시작과 종료태그 필요 
      ex) {% tag %}
      ex) {% if %} {% endif %}

  - Comments 주석
    ex) {# #} or {% comment %} {% endcomment %}


딕셔너리 view에서 사용할라면 {{name}}

url -> view -> templates

  block tag
    - 재정의 할 수 있는 블록 정의 
    {% block content %}  content 와 같은 이름 반드시 필요 
      <h1>
        안녕하세요! {{name}}
      </h1>
    {% endblock content %}


요청과 응답의 개념 
페이지 이동 X !!!
  form 태그
    action & method = form 핵심속성
    어디로   어떤방식 ?
    
    input = 입력받는 속성
      name 이 핵심 = key의 역할

  ex) https://search.naver.com/search.naver?key=value


MODEL

id 컬럼은 Django가 자동생성

Model 부모 클래스 상속 필수 .. ~~
class Article(models.Model):
  title = models.CharField(max_length=10)
  content = models.TextField()
  
  title이랑 content 는  필드 명 
  CharField. TextField 는 데이터 유형,
  max_length = 10 은 제약 조건 
  즉 DB테이블의 열(필드) 정의하며, 데이터타입과 제약조건 정의

  숫자 - IntegerField, FloatField
  Django Documentation 들어가ㅏ 버전을 4.2 로 바꾸고 봐라 !

  - CharField       제한된 길이의 문자열을 저장 | max_length 는 필수 옵션
  - TextField       길이 제한 없는 대용량 텍스트 | 무한대는 아님 
  - Field Options   필드 "동작" "제약조건" 정의
      - null        NULL 값 기본 False
      - blank       form에서 빈 값 허용할지 여부 결정 기본 False
      - default     필드의 기본값 설정 
  - BigAutoField    id 속성값 자동으로 순번 매겨줌 
  - DateTimeField   날짜
      -auto_now     저장될 때마다 자동 현재 날짜시간 저장
      -auto_now_add 처음 생성될 때만 자동 현재 날짜시간 저장
  

Migrations - model클래스의 변경사항을 DB에 최종 반영
  1. model class 설계도 초안
            | python manage.py makemigrations
  2. migration   최종설계도
            | python manage.py migrate
  3. dq.sqlite3  DB

model class 에 변경사항이 생겼다면
반드시 새로운 설계도 생성 후
DB에 반영 
이전 설계도를 지우는 건 XX 

python manage.py createsuperuser == 관리자 생성 계정

DB 초기화
migration 파일 삭제
db.sqlite3 파일 삭제

python manage.py showmigrations 
- migrations 파일들이 migrate가 됐는지 아닌지 여부 확인 X가 체크 의미 
python manage.py sqlmigrate articles 0001 
- 어떻게 번역되어 DB에 전달되는지 확인  

---------------------------------------------------------------------------

pip install ipython - 파이썬 더 쉽게 하게끔 도와주는 
pip install django-extensions - DB할라면 이거 꼭 설치

setting.py INSTALLED_APPS에 django_extension 꼭 추가 쉼표도 잊지마ㅏ
INSTALLED_APPS = [
    'articles',
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

python manage.py shell_plus       - 파이썬 shell 환경 ON

1. CREATE 생성 
    1. 데이터 객체 생성하는 첫 번째 방법
    그러면 shell terminal 켜지면서
    article = Article()         - Article class로부터 article instance 생성
    article.title = 'first'     - 인스턴스 변수 title에 값 할당
    article.content = 'django!' - 인스턴스 변수 content에 값 할당
    Article.objects.all()       - 그냥 내가 쓴거 보여주는 고 
    여기서 저장을 꼬옥 해줘야함 아니면 Article.objects.all() 입력해도 아무것도 출력안됨
    article.save()              - 저장해주기
    article                     - 이제 입력하면 출력값 -> Out[9]: <Article: Article object (1)> 1은 PK
    article.pk                  - 이제 id값이 생성되어 1 출력
        | 
        실제 table에는 pk가 아닌 id로 입력되어있음

    2. 데이터 객체 생성하는 두 번째 방법
    article = Article(title='second', content='django!')    - 한번에 합쳐주기
    article.save()              - 이거도 꼭 저장은 해줘야함 !! 

    3. 데이터 객체 생성하는 세 번째 방법
    # 위 2가지 방법과 달리 바로 저장이후 바로 생성된 데이터가 반환
    Article.objects.create(title='third', content='django!')

2. READ 조회
    Return new QuerySets
        1. all()        - 전체 조회 메서드
            - Article.objects.all()
            - article.title()
        2. filter()     - 조회할 때 조건 걸어주기
            - Article.objects.filter(content='django!')
            - Article.objects.filter(title='first')
            - Article.objects.filter(title='abc')   - 없으면 <QuerySet []>로 출력
            - article

            + filter(), exclude(), get()
                - Article.objects.filter(content__contains='dja')
                  내용에 dja가 포함된 모든 게시물 조회
                - Article.objects.filter(title__startswith='he')
                  제목이 he로 시작하는 모든 게시물 조회 
        
    Do not return QuerySets
        1. get()        - QuerySet이 아닌 단일 객체 조회
            - Article.objects.get(pk=1)     - 1번 게시글 내놔 !
            - <Article: Article object (1)> QuerySet이 아닌 Article로 출력
            - 조회할 때 결과가 여러개라면 에러
            - 검색한 결과가 없다면 에러
            - primary key와 같이 고유성을 보장하는 조회에서 사용해야함 

3. UPDATE 수정
    수정하기 전 조회 필수 get으로 조회하기
    article = Article.objects.get(pk=3)
    article.title = 'third'
    article.content = 'ssafy!'
    article.save()          - 필수

4. DELETE 삭제
    삭제하기 전 조회 필수 get으로 조회
    article = Article.objects.get(pk=2)
    article.delete()
    이건 article.save() 안해도 자동 삭제 
    Article.objects.get(pk=1) - 삭제하면 더 이상 조회 불가


조회로 전체게시글 조회하기
# url app으로 나누기
    # 1. include 추가 
    # 2. path('articles/', include('articles.urls')), 추가
    # 3. articles 밑에 urls.py 만들기 
    # 4. 기존 url에서 긁어와서 필요없는거 지우고 바꾸기 
        # from django.urls import path
        # from . import views

        # app_name = 'articles'
        # urlpatterns = [
        #     path('', views.index, name='index'),
        # ]

    # 후에 views에 index 함수 작성 
    # def index(request):
    #     return render(request, 'articles/index.html')

    # 5. articles 밑에 templates/articles/index.html 생성


ORM - 객체지향 프로그래밍 언어를 사용하여 호환되지 않는 유형간의 시스템간 데이터 변환 기술 

Article.objects.all()       - QuerySet API 구문
    |      |      |
   Model manager QuertSetAPI

Query   - 특정한 데이터를 보여달라는 요청
        - '쿼리문' 작성 

QuerySet    - DB에게서 전달받은 객체 목록 (순회가능한 1개 이상의 데이터)
            - Django ORM을 통해 만들어진 자료형
            - DB가 단일객체를 반환시, QuerySet이 아닌 모델 Class 의 인스턴스로 반환

QuerySet API    - DB의 데이터를 저장 조회 수정 삭제 하는 것 CRUD 
                - Create Read Update Delete

django queryset api 구글에 이거 치고 맨 상단 두개의 공식문서 확인 

Field lookups - gt 이상, gte 초과, lt 이하, lte 미만, contains, startswith

--------------------------------------------------------------------------

|| 단일 게시글 조회

  검색, 웹 페이지 요청, API 데이터 조회 == 조회
'GET' method    - 서버로부터 데이터를 요청하고 받아오는 데(조회) 사용
                - GET으로 보내면 데이터가 문자열에 노출
                - URL 길이에 제한이 있어서 대량의 데이터 전송에 적합핮 ㅣ않음
                - 요청 URL이 브라우저 히스토리에 남음
                - 한번 GET요청 하고나면 저장을 해서 페이지 로딩 시간 단축 (캐시)

  로그인, 파일업로드, 새 데이터 생성, API에서 데이터 변경 요청 == 생성, 수정, 삭제
'POST' method   - 서버에 데이터를 제출하여 리소르를 생성, 수정, 삭제 하는데 사용
                - HTTP Body를 통해 전송
                - GET 보다 더 많은 양의 데이터 전송 가능
                - 브라우저 히스토리에 남지 않음
                - POST는 캐시할 수 없음 

CSRF  - Croos-Site-Request-Forgery
      - 사이트 간 요청 위조
      - 자신의 의지와 무관하게 사이트를 공격하는 행위
      - form 태그 안에 {% csrf_token %}

HTTP response status code ex) 404, 403, 200-성공
서버와 클라이언트의 요청에 대한 처리 결과를 나타내는 3자리 숫자
  - 요청 처리 결과를 명확히 전달
  - 문제 발생 시 디버깅에 도움
  - 웹 애플리케이션의 동작을 제어하는데 사용 


캐시 Cache - 데이터 임시로 저장하는 메모리, 디스크 공간
           - 이전에 접근한 데이터를 빠르게 검색하고 접근할 수 있음 

----------------------------------------------------------------------------------

Form  - 유효한 데이터인지에 대한 확인이 필요
      - Django가 제공하는 Form 사용하면 직접 개발 안해도 됨 !! 

app 밑에 forms.py 생성하고 

from django import forms

class ArticleForm(forms.Form):
    title = forms.CharField(max_length=10)


from .forms import ArticleForm

def new(request):
    form = ArticleForm()
    context = {
        'form': form,
    }
    # 게시글 작성 페이지 응답
    return render(request, 'articles/new.html', context) // views.py

{{form.as_p}} -> 이거 하나만 있으면 바ㅏ로 {{form}}
  as_p = 한줄 띄우기 
  as_div
  as_ul
  as_table

  class ArticleForm(forms.Form):
    title = forms.CharField(max_length=10)
    content = forms.CharField(widget=forms.Textarea)

    widget 붙이면 textarea로 가능 !! 

Form      - 입력 데이터를 DB에 저장 X ex) 검색, 로그인
ModelForm - 사용자 입력 데이터를 DB에 저장 ex) 게시글 작성, 회원가입 

ModelForm - Model 과 연결된 Form 자동 생성 기능

class ArticleForm(forms.ModelForm):
    class Meta:
        model = Article
        fields = '__all__'

def update(request, pk):
    article = Article.objects.get(pk=pk)

    form = ArticleForm(request.POST, instance=article)
    if form.is_valid():
        form.save()
        return redirect('articles:detail', article.pk)
    context = {
        'article' : article,
        'form' : form,
    }
    return render(request, 'articles/edit.html', context)


new랑 create 결합 ! 
def create(request):
  if request.method == 'POST:
    form = ArticleForm(request.POST)
    if form is_valid():
      article = form.save()
      return redirect('articles:detail', article.pk)
  else:
    form = ArticleForm()
  context = {
    'form' : form,
  }
  return render(request, 'articles/new.html', context)

  ----------------------------------------------------------

app폴더/static/articles/img.png = static files 기본 경로

  정적 파일 img 제공 

  STATIC_URL = 'static/'
  STATICFILES_DIRS = [
      BASE_DIR / 'static',
  ]

  <img src="{% static "articles/sample-1.png" %}" alt="sample">
  <img src="{% static "sample-2.png" %}" alt="sample">


  Media files img 제공
  ImageField()  - 문자열 필드 
  이미지 객체가 DB에 저장되는 것이 아닌 이미지 파일의 경로 문자열이 저장 

  MEDIA_ROOT = BASE_DIR / 'media'
  MEDIA_URL = 'media/'

  models.py에 추가
    image = models.ImageField(blank=True)
    blank=True 속성을 작성하면 빈 문자열도 작성 가능 사진 안올리는 사람 경우 

  image 받을라면
  pip install pillow
  python manage.py makemigrations
  python manage.py migrate
  pip freeze > requirements.txt

  create.html
  <form action="{% url "articles:create" %}" method="POST" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit">
  </form>

  views.py
  def create(request):
    # 요청 메서드가 POST 일 때
    if request.method == 'POST':
        form = ArticleForm(request.POST, request.FILES)
        if form.is_valid():
            article = form.save()
            return redirect('articles:detail', article.pk)
    # 요청 메서드가 POST가 아닐 때 GET PUT DELETE
    else:
        form = ArticleForm()
    context = {
        'form' : form,
    }
    return render(request, 'articles/create.html', context)

  model image field에 추가 
    upload_to='%Y/%m/%d/'
    upload_to='파일이름/'
  
  form = ArticleForm(request.POST, request.FILES) files 는 무조근 두번 째