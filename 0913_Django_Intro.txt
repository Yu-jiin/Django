code .gitignore 하고 시작해라 ...

가상환경
    - Python 애플리케이션과 그에 따른 패키지들을 격리하여 관리할 수 있는 독립적인 실행 환경

    패키지 목록이 필요한 이유
        - 두 명의 개발자가 같은 패키지버전을 사용해야 함.

    의존성 패키지 
        - 서로 다른 패키지임에도 같이 존재해야 하는 패키지도 있고,
        - 그 패키지들이 호환되야하고... 아무튼 개락 복잡함 

    가상환경 만들기 git bash
    1. 아무 폴더 만들고
    2. python -m venv venv              (venv는 관례적으로 사용되는 가상환경 이름)
    3. source venv/Scripts/activate     (가상환경 on)
    (운영체제마다 조금씩 달라서 macOS = source venv/bin/activate)
    4. pip freeze > requirements.txt    (txt파일이 만들어짐)
        - txt파일에 각 패키지 버전 적어서 공유 !! 
    5. pip install -r requirements.txt  (txt파일의 패키지 버전 한방에 설치갈비)
    6. deactivate                       (가상환경 끄기 // 그냥 꺼도 되긴 함)

    가상환경 주의사항
    1. 파이썬을 on/off로 전환
    2. venv폴더는 gitignore에 작성되어 원격 저장소에 공유 X
    3. 프로젝트마다 별도의 가상환경 사용 
    4. 이름은 그냥 venv로.. 다른거 쓰지마 

    django-admin startproject firstpjt .    (프젝 만들고)
    python manage.py runserver              (서버 실행)
    ctrl + c = 서버 종료 !! 
    python manage.py startapp articles      (앱 실행, 이름은 복수형으로)
    앱 생성하고 등록해야함 .. !!!
    settings.py에 
        INSTALLED_APPS = [
        'articles',     // 이거 등록해줘야함
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

Django Design Pattern
디자인패턴
    - SW설계에서 발생하는 문제를 해결하기 위한 일반적인 해결책
        (애플리케이션 구조는 이렇게 구성하자 라는 관행)

MVC 디자인 패턴 (Model, View, Controller) - 대표적인 패턴    
MTV 디자인 패턴 (Model, Template, View) - Django 구조화하는 패턴
    - 기존 MVC와 동일하나 단순 명칭을 다르게 정의 

요청 -> urls.py -> views.py -> templates

articles/templates 폴더 꼬옥 만들기 ... !! 


최종 == 
가상환경 생성 루틴
python -m venv venv
source venv/Scripts/activate
pip install django
pip freeze > requirements.txt
(git add 전 gitignore 생성 -> git 생성)

urls.py에서 각 url 문자열 경로는 반드시 /로 끝
view함수는 첫번째 인자로 요청객체를 받고 반드시 request로
django는 특정경로의 templates 파일만 읽어옴 

---------------------------------------------------------------------------

Django Template System
  - 사용자의 표현을 담당

Django Template Language
  - 조건, 반복, 변수등의 프로그래밍적 기능 제공 

DTL Syntax
  - Variable
    = render 함수 세번째 인자로 딕셔너리 사용 
    = key에 해당하는 문자열이 사용가능한 변수명 
      ex) {{variable}}   {{variable.attribute}}
        . 도트로 변수 속성 접근가능 

  - Filters
    = 변수뒤에 | 
    = 60 개의 built-in templates filters를 제공 장고 DTL 검색해서 봐
    = 연결이 가능함 
      ex) {{name|truncatewords:30}} = 이름을 30자로 잘라서 출력

  - Tags
    = 반복 논리 수행.. 일부는 시작과 종료태그 필요 
      ex) {% tag %}
      ex) {% if %} {% endif %}

  - Comments 주석
    ex) {# #} or {% comment %} {% endcomment %}


딕셔너리 view에서 사용할라면 {{name}}

url -> view -> templates

  block tag
    - 재정의 할 수 있는 블록 정의 
    {% block content %}  content 와 같은 이름 반드시 필요 
      <h1>
        안녕하세요! {{name}}
      </h1>
    {% endblock content %}


요청과 응답의 개념 
페이지 이동 X !!!
  form 태그
    action & method = form 핵심속성
    어디로   어떤방식 ?
    
    input = 입력받는 속성
      name 이 핵심 = key의 역할

  ex) https://search.naver.com/search.naver?key=value


MODEL

id 컬럼은 Django가 자동생성

Model 부모 클래스 상속 필수 .. ~~
class Article(models.Model):
  title = models.CharField(max_length=10)
  content = models.TextField()
  
  title이랑 content 는  필드 명 
  CharField. TextField 는 데이터 유형,
  max_length = 10 은 제약 조건 
  즉 DB테이블의 열(필드) 정의하며, 데이터타입과 제약조건 정의

  숫자 - IntegerField, FloatField
  Django Documentation 들어가ㅏ 버전을 4.2 로 바꾸고 봐라 !

  - CharField       제한된 길이의 문자열을 저장 | max_length 는 필수 옵션
  - TextField       길이 제한 없는 대용량 텍스트 | 무한대는 아님 
  - Field Options   필드 "동작" "제약조건" 정의
      - null        NULL 값 기본 False
      - blank       form에서 빈 값 허용할지 여부 결정 기본 False
      - default     필드의 기본값 설정 
  - BigAutoField    id 속성값 자동으로 순번 매겨줌 
  - DateTimeField   날짜
      -auto_now     저장될 때마다 자동 현재 날짜시간 저장
      -auto_now_add 처음 생성될 때만 자동 현재 날짜시간 저장
  

Migrations - model클래스의 변경사항을 DB에 최종 반영
  1. model class 설계도 초안
            | python manage.py makemigrations
  2. migration   최종설계도
            | python manage.py migrate
  3. dq.sqlite3  DB

model class 에 변경사항이 생겼다면
반드시 새로운 설계도 생성 후
DB에 반영 
이전 설계도를 지우는 건 XX 

python manage.py createsuperuser == 관리자 생성 계정

DB 초기화
migration 파일 삭제
db.sqlite3 파일 삭제

python manage.py showmigrations 
- migrations 파일들이 migrate가 됐는지 아닌지 여부 확인 X가 체크 의미 
python manage.py sqlmigrate articles 0001 
- 어떻게 번역되어 DB에 전달되는지 확인  

---------------------------------------------------------------------------

pip install ipython - 파이썬 더 쉽게 하게끔 도와주는 
pip install django-extensions - DB할라면 이거 꼭 설치

ORM - 객체지향 프로그래밍 언어를 사용하여 호환되지 않는 유형간의 시스템간 데이터 변환 기술 

Article.objects.all()       - QuerySet API 구문
    |      |      |
   Model manager QuertSetAPI

Query   - 특정한 데이터를 보여달라는 요청
        - '쿼리문' 작성 

QuerySet    - DB에게서 전달받은 객체 목록 (순회가능한 1개 이상의 데이터)
            - Django ORM을 통해 만들어진 자료형
            - DB가 단일객체를 반환시, QuerySet이 아닌 모델 Class 의 인스턴스로 반환

QuerySet API    - DB의 데이터를 저장 조회 수정 삭제 하는 것 CRUD 
                - Create Read Update Delete


    1. CREATE 생성 

