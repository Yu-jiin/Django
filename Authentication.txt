Authentication System01

쿠키 저장 방식
    - 브라우저는 쿠키를 KEY-VALUE 형식으로 저장
    - 쿠키에는 name, value, Domain, 만료시간 등 추가 속성 포함 

쿠키 사용 목적
    - 세션 관리 (로그인, 자동완성, 공지 하루 안보기, 장바구니)
    - 개인화 (사용자 선호 설정 저장)
    - 트래킹 (사용자 행동을 기록 및 분석)


세션 (Session)
    -  상태 정보를 저장하는 데이터 저장 방식
    1. 로그인 요청 후 인증 성공하면 서버에서 session 데이터 생성 후 저장
    2. session 데이터에 인증할 수 있는 session id 발급
    3. session id를 클라이언트에게 응답(데이터는 서버에 저장, 열쇠만 줌)
    4. 클라이언트는 응답 받은 session id를 쿠키에 저장
    5. 클라이언트가 다시 동일 서버 접속시, 요청과 함께 쿠키 session id를 서버 전달
    6. 쿠키는 요청 때마다 서버에 함께 전송되므로 서버에서 session id를 확인해서 로그인 유지

||  서버 측에서 세션 데이터 생성 후 저장
    세션 ID 생성
    ID를 클라이언트 전송 
    클라이언트는 쿠키에 저장

    이후 || 클라이언트가 같은 서버에 재요청 시마다 저장한 쿠키도 요청과 함께 전송

쿠키와 세션의 목적
    - 클라이언트와 서버간의 상태 정보 유지 및
    - 사용자 식별

Django Authetication System - 사용자 인증 
Authentication              - 인증

두 번째 app accounts 생성 및 등록
python manage.py startapp accounts
settings에도 등록 !! 
# accounts/urls.py

from django.urls import path
from . import views

app_name = 'accounts'
urlpatterns = [

]

Custom User Model 
    - 우리는 내장된 auth User 클래스 사용하고 있었음

프로젝트 시작하며 반드시 USER 모델을 대체해야함.
커스텀 User 모델 설정 강력 권장 !
커스텀 모델은 기존 user모델과 동일하면서 필요한 경우 나중에 맞춤 설정 가능
단, User모델 대체 작업은 migrations 혹 첫 migrate 실행하기 전에 해야함 

# models.py
from django.db import models
from django.contrib.auth.models import AbstractUser
# 커스텀 User 모델 대체하기 위한 class 작성 
class User(AbstractUser):
    pass

accounts/urls.py
from django.contrib import admin
from .models import User
from django.contrib.auth.admin import UserAdmin
admin.site.register(User, UserAdmin)

settings.py 맨 밑에
AUTH_USER_MODEL = 'accounts.USER'

그러고 나서 DB생성 migrate


----------------------------------------------------------------

Login인 session create 하는 과정
AuthenticationForm()        - built in form 존재
